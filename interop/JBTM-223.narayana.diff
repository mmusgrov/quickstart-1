diff --git a/ArjunaJTS/idl/pom.xml b/ArjunaJTS/idl/pom.xml
index 28a2cf4..1bf852a 100644
--- a/ArjunaJTS/idl/pom.xml
+++ b/ArjunaJTS/idl/pom.xml
@@ -24,6 +24,10 @@
   <description>Narayana: ArjunaJTS idl</description>
   <packaging>pom</packaging>
 
+  <properties>
+    <otsVersion>1.2</otsVersion>
+  </properties>
+
   <build>
     <plugins>
       <plugin>
@@ -38,6 +42,24 @@
           <skip>true</skip>
         </configuration>
       </plugin>
+      <plugin>
+        <artifactId>maven-antrun-plugin</artifactId>
+        <executions>
+          <execution>
+            <phase>validate</phase>
+            <goals>
+              <goal>run</goal>
+            </goals>
+            <configuration>
+              <tasks>
+                <!-- assumes the default location for the source directory -->
+                <copy failonerror="false" file="../src/main/idl/omg/CosTransactions.idl.${otsVersion}"
+                   tofile="../src/main/idl/omg/CosTransactions.idl"/>
+              </tasks>
+            </configuration>
+          </execution>
+        </executions>
+      </plugin>
     </plugins>
   </build>
 
diff --git a/ArjunaJTS/idl/src/main/idl/omg/CosTransactions.idl b/ArjunaJTS/idl/src/main/idl/omg/CosTransactions.idl
deleted file mode 100644
index 1ed8b2f..0000000
--- a/ArjunaJTS/idl/src/main/idl/omg/CosTransactions.idl
+++ /dev/null
@@ -1,209 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source
- * Copyright 2006, Red Hat Middleware LLC, and individual contributors
- * as indicated by the @author tags. 
- * See the copyright.txt in the distribution for a full listing 
- * of individual contributors.
- * This copyrighted material is made available to anyone wishing to use,
- * modify, copy, or redistribute it subject to the terms and conditions
- * of the GNU Lesser General Public License, v. 2.1.
- * This program is distributed in the hope that it will be useful, but WITHOUT A
- * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
- * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
- * You should have received a copy of the GNU Lesser General Public License,
- * v.2.1 along with this distribution; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA  02110-1301, USA.
- * 
- * (C) 2005-2006,
- * @author JBoss Inc.
- */
-/*
- * Copyright (C) 1999-2001 by HP Bluestone Software, Inc. All rights Reserved.
- *
- * HP Arjuna Labs,
- * Newcastle upon Tyne,
- * Tyne and Wear,
- * UK.
- *
- * $Id: CosTransactions.idl 2342 2006-03-30 13:06:17Z  $
- */
-
-#ifndef COSTRANSACTIONS_IDL_
-#define COSTRANSACTIONS_IDL_
-
-#include <orb.idl>
-
-#pragma prefix "omg.org"
-
-/*
- * See https://issues.jboss.org/browse/JBTM-1756 for why this is
- * necessary at the moment.
- */
- 
-#ifndef ORB_CURRENT_SUPPORT
-module CORBA
-{
-	interface Current {};
-};
-#endif
-
-module CosTransactions
-{
-    enum Status { StatusActive, StatusMarkedRollback, StatusPrepared,
-		  StatusCommitted, StatusRolledBack, StatusUnknown,
-		  StatusPreparing, StatusCommitting, StatusRollingBack,
-		  StatusNoTransaction };
-
-    enum Vote { VoteCommit, VoteRollback, VoteReadOnly };
-
-    // Heuristic exceptions
-
-    exception HeuristicRollback {};
-    exception HeuristicCommit {};
-    exception HeuristicMixed {};
-    exception HeuristicHazard {};
-
-    // Other transaction related exceptions
-    
-    exception SubtransactionsUnavailable {};
-    exception NotSubtransaction {};
-    exception Inactive {};
-    exception NotPrepared {};
-    exception NoTransaction {};
-    exception InvalidControl {};
-    exception Unavailable {};
-    exception SynchronizationUnavailable {};
-
-    // Forward references for later interfaces
-	
-    interface Control;
-    interface Terminator;
-    interface Coordinator;
-    interface Resource;
-    interface RecoveryCoordinator;
-    interface SubtransactionAwareResource;
-    interface TransactionFactory;
-    interface TransactionalObject;
-    interface Current;
-    interface Synchronization;
-
-    struct otid_t
-    {
-	long formatID;  /* format identifier. 0 is OSI TP */
-	long bqual_length;
-	sequence <octet> tid;
-    };
-
-    struct TransIdentity
-    {
-	Coordinator coord;
-	Terminator term;
-	otid_t otid;
-    };
-
-    struct PropagationContext
-    {
-	unsigned long timeout;
-	TransIdentity current;
-	sequence <TransIdentity> parents;
-	any implementation_specific_data;
-    };
-
-	interface Current : CORBA::Current
-    {
-	void begin () raises (SubtransactionsUnavailable);
-	void commit (in boolean report_heuristics) raises (NoTransaction, HeuristicMixed, HeuristicHazard);
-	void rollback () raises (NoTransaction);
-	void rollback_only () raises (NoTransaction);
-
-	Status get_status ();
-	string get_transaction_name ();
-	void set_timeout (in unsigned long seconds);
-
-	Control get_control ();
-	Control suspend ();
-	void resume (in Control which) raises (InvalidControl);
-    };
-    
-    interface TransactionFactory
-    {
-	Control create (in unsigned long time_out);
-	Control recreate (in PropagationContext ctx);
-    };
-
-    interface Control
-    {
-	Terminator get_terminator () raises (Unavailable);
-	Coordinator get_coordinator () raises (Unavailable);
-    };
-
-    interface Terminator
-    {
-	void commit (in boolean report_heuristics) raises (HeuristicMixed, HeuristicHazard);
-	void rollback ();
-    };
-
-    interface Coordinator
-    {
-	Status get_status ();
-	Status get_parent_status ();
-	Status get_top_level_status ();
-    
-	boolean is_same_transaction (in Coordinator tc);
-	boolean is_related_transaction (in Coordinator tc);
-	boolean is_ancestor_transaction (in Coordinator tc);
-	boolean is_descendant_transaction (in Coordinator tc);
-	boolean is_top_level_transaction ();
-
-	unsigned long hash_transaction ();
-	unsigned long hash_top_level_tran ();
-
-	RecoveryCoordinator register_resource (in Resource r) raises (Inactive);
-
-	void register_synchronization (in Synchronization sync) raises (Inactive, SynchronizationUnavailable);
-
-	void register_subtran_aware (in SubtransactionAwareResource r) raises (Inactive, NotSubtransaction);
-
-	void rollback_only () raises (Inactive);
-
-	string get_transaction_name ();
-
-	Control create_subtransaction () raises (SubtransactionsUnavailable, Inactive);
-
-	PropagationContext get_txcontext () raises (Unavailable);
-    };
-
-    interface RecoveryCoordinator
-    {
-	Status replay_completion (in Resource r) raises (NotPrepared);
-    };
-    
-    interface Resource
-    {
-	Vote prepare () raises (HeuristicMixed, HeuristicHazard);
-	void rollback () raises (HeuristicCommit, HeuristicMixed, HeuristicHazard);
-	void commit () raises (NotPrepared, HeuristicRollback, HeuristicMixed, HeuristicHazard);
-	void commit_one_phase () raises (HeuristicHazard);
-	void forget ();
-    };
-
-    interface SubtransactionAwareResource : Resource
-    {
-	void commit_subtransaction (in Coordinator parent);
-	void rollback_subtransaction ();
-    };
-    
-    interface TransactionalObject
-    {
-    };
-
-    interface Synchronization : TransactionalObject
-    {
-	void before_completion ();
-	void after_completion (in Status s);
-    };
-    
-};
-
-#endif
diff --git a/ArjunaJTS/idl/src/main/idl/omg/CosTransactions.idl.1.2 b/ArjunaJTS/idl/src/main/idl/omg/CosTransactions.idl.1.2
new file mode 100644
index 0000000..1ed8b2f
--- /dev/null
+++ b/ArjunaJTS/idl/src/main/idl/omg/CosTransactions.idl.1.2
@@ -0,0 +1,209 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2006, Red Hat Middleware LLC, and individual contributors
+ * as indicated by the @author tags. 
+ * See the copyright.txt in the distribution for a full listing 
+ * of individual contributors.
+ * This copyrighted material is made available to anyone wishing to use,
+ * modify, copy, or redistribute it subject to the terms and conditions
+ * of the GNU Lesser General Public License, v. 2.1.
+ * This program is distributed in the hope that it will be useful, but WITHOUT A
+ * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
+ * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
+ * You should have received a copy of the GNU Lesser General Public License,
+ * v.2.1 along with this distribution; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA  02110-1301, USA.
+ * 
+ * (C) 2005-2006,
+ * @author JBoss Inc.
+ */
+/*
+ * Copyright (C) 1999-2001 by HP Bluestone Software, Inc. All rights Reserved.
+ *
+ * HP Arjuna Labs,
+ * Newcastle upon Tyne,
+ * Tyne and Wear,
+ * UK.
+ *
+ * $Id: CosTransactions.idl 2342 2006-03-30 13:06:17Z  $
+ */
+
+#ifndef COSTRANSACTIONS_IDL_
+#define COSTRANSACTIONS_IDL_
+
+#include <orb.idl>
+
+#pragma prefix "omg.org"
+
+/*
+ * See https://issues.jboss.org/browse/JBTM-1756 for why this is
+ * necessary at the moment.
+ */
+ 
+#ifndef ORB_CURRENT_SUPPORT
+module CORBA
+{
+	interface Current {};
+};
+#endif
+
+module CosTransactions
+{
+    enum Status { StatusActive, StatusMarkedRollback, StatusPrepared,
+		  StatusCommitted, StatusRolledBack, StatusUnknown,
+		  StatusPreparing, StatusCommitting, StatusRollingBack,
+		  StatusNoTransaction };
+
+    enum Vote { VoteCommit, VoteRollback, VoteReadOnly };
+
+    // Heuristic exceptions
+
+    exception HeuristicRollback {};
+    exception HeuristicCommit {};
+    exception HeuristicMixed {};
+    exception HeuristicHazard {};
+
+    // Other transaction related exceptions
+    
+    exception SubtransactionsUnavailable {};
+    exception NotSubtransaction {};
+    exception Inactive {};
+    exception NotPrepared {};
+    exception NoTransaction {};
+    exception InvalidControl {};
+    exception Unavailable {};
+    exception SynchronizationUnavailable {};
+
+    // Forward references for later interfaces
+	
+    interface Control;
+    interface Terminator;
+    interface Coordinator;
+    interface Resource;
+    interface RecoveryCoordinator;
+    interface SubtransactionAwareResource;
+    interface TransactionFactory;
+    interface TransactionalObject;
+    interface Current;
+    interface Synchronization;
+
+    struct otid_t
+    {
+	long formatID;  /* format identifier. 0 is OSI TP */
+	long bqual_length;
+	sequence <octet> tid;
+    };
+
+    struct TransIdentity
+    {
+	Coordinator coord;
+	Terminator term;
+	otid_t otid;
+    };
+
+    struct PropagationContext
+    {
+	unsigned long timeout;
+	TransIdentity current;
+	sequence <TransIdentity> parents;
+	any implementation_specific_data;
+    };
+
+	interface Current : CORBA::Current
+    {
+	void begin () raises (SubtransactionsUnavailable);
+	void commit (in boolean report_heuristics) raises (NoTransaction, HeuristicMixed, HeuristicHazard);
+	void rollback () raises (NoTransaction);
+	void rollback_only () raises (NoTransaction);
+
+	Status get_status ();
+	string get_transaction_name ();
+	void set_timeout (in unsigned long seconds);
+
+	Control get_control ();
+	Control suspend ();
+	void resume (in Control which) raises (InvalidControl);
+    };
+    
+    interface TransactionFactory
+    {
+	Control create (in unsigned long time_out);
+	Control recreate (in PropagationContext ctx);
+    };
+
+    interface Control
+    {
+	Terminator get_terminator () raises (Unavailable);
+	Coordinator get_coordinator () raises (Unavailable);
+    };
+
+    interface Terminator
+    {
+	void commit (in boolean report_heuristics) raises (HeuristicMixed, HeuristicHazard);
+	void rollback ();
+    };
+
+    interface Coordinator
+    {
+	Status get_status ();
+	Status get_parent_status ();
+	Status get_top_level_status ();
+    
+	boolean is_same_transaction (in Coordinator tc);
+	boolean is_related_transaction (in Coordinator tc);
+	boolean is_ancestor_transaction (in Coordinator tc);
+	boolean is_descendant_transaction (in Coordinator tc);
+	boolean is_top_level_transaction ();
+
+	unsigned long hash_transaction ();
+	unsigned long hash_top_level_tran ();
+
+	RecoveryCoordinator register_resource (in Resource r) raises (Inactive);
+
+	void register_synchronization (in Synchronization sync) raises (Inactive, SynchronizationUnavailable);
+
+	void register_subtran_aware (in SubtransactionAwareResource r) raises (Inactive, NotSubtransaction);
+
+	void rollback_only () raises (Inactive);
+
+	string get_transaction_name ();
+
+	Control create_subtransaction () raises (SubtransactionsUnavailable, Inactive);
+
+	PropagationContext get_txcontext () raises (Unavailable);
+    };
+
+    interface RecoveryCoordinator
+    {
+	Status replay_completion (in Resource r) raises (NotPrepared);
+    };
+    
+    interface Resource
+    {
+	Vote prepare () raises (HeuristicMixed, HeuristicHazard);
+	void rollback () raises (HeuristicCommit, HeuristicMixed, HeuristicHazard);
+	void commit () raises (NotPrepared, HeuristicRollback, HeuristicMixed, HeuristicHazard);
+	void commit_one_phase () raises (HeuristicHazard);
+	void forget ();
+    };
+
+    interface SubtransactionAwareResource : Resource
+    {
+	void commit_subtransaction (in Coordinator parent);
+	void rollback_subtransaction ();
+    };
+    
+    interface TransactionalObject
+    {
+    };
+
+    interface Synchronization : TransactionalObject
+    {
+	void before_completion ();
+	void after_completion (in Status s);
+    };
+    
+};
+
+#endif
diff --git a/ArjunaJTS/idl/src/main/idl/omg/CosTransactions.idl.1.4 b/ArjunaJTS/idl/src/main/idl/omg/CosTransactions.idl.1.4
new file mode 100644
index 0000000..bf6a6c0
--- /dev/null
+++ b/ArjunaJTS/idl/src/main/idl/omg/CosTransactions.idl.1.4
@@ -0,0 +1,223 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2006, Red Hat Middleware LLC, and individual contributors
+ * as indicated by the @author tags. 
+ * See the copyright.txt in the distribution for a full listing 
+ * of individual contributors.
+ * This copyrighted material is made available to anyone wishing to use,
+ * modify, copy, or redistribute it subject to the terms and conditions
+ * of the GNU Lesser General Public License, v. 2.1.
+ * This program is distributed in the hope that it will be useful, but WITHOUT A
+ * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
+ * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
+ * You should have received a copy of the GNU Lesser General Public License,
+ * v.2.1 along with this distribution; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA  02110-1301, USA.
+ * 
+ * (C) 2005-2006,
+ * @author JBoss Inc.
+ */
+/*
+ * Copyright (C) 1999-2001 by HP Bluestone Software, Inc. All rights Reserved.
+ *
+ * HP Arjuna Labs,
+ * Newcastle upon Tyne,
+ * Tyne and Wear,
+ * UK.
+ *
+ * $Id: CosTransactions.idl 2342 2006-03-30 13:06:17Z  $
+ */
+
+#ifndef COSTRANSACTIONS_IDL_
+#define COSTRANSACTIONS_IDL_
+
+#include <orb.idl>
+
+#pragma prefix "omg.org"
+
+/*
+ * See https://issues.jboss.org/browse/JBTM-1756 for why this is
+ * necessary at the moment.
+ */
+ 
+#ifndef ORB_CURRENT_SUPPORT
+module CORBA
+{
+	interface Current {};
+};
+#endif
+
+module CosTransactions
+{
+//    enum Status { StatusActive, StatusMarkedRollback, StatusPrepared,
+//		  StatusCommitted, StatusRolledBack, StatusUnknown,
+//		  StatusPreparing, StatusCommitting, StatusRollingBack,
+//		  StatusNoTransaction };
+
+    enum Status {
+                StatusActive,
+                StatusMarkedRollback,
+                StatusPrepared,
+                StatusCommitted,
+                StatusRolledBack,
+                StatusUnknown,
+                StatusNoTransaction,
+                StatusPreparing,
+                StatusCommitting,
+                StatusRollingBack
+    };
+
+
+    enum Vote { VoteCommit, VoteRollback, VoteReadOnly };
+
+    // Heuristic exceptions
+
+    exception HeuristicRollback {};
+    exception HeuristicCommit {};
+    exception HeuristicMixed {};
+    exception HeuristicHazard {};
+
+    // Other transaction related exceptions
+    
+    exception SubtransactionsUnavailable {};
+    exception NotSubtransaction {};
+    exception Inactive {};
+    exception NotPrepared {};
+    exception NoTransaction {};
+    exception InvalidControl {};
+    exception Unavailable {};
+    exception SynchronizationUnavailable {};
+
+    // Forward references for later interfaces
+	
+    interface Control;
+    interface Terminator;
+    interface Coordinator;
+    interface Resource;
+    interface RecoveryCoordinator;
+    interface SubtransactionAwareResource;
+    interface TransactionFactory;
+    interface TransactionalObject;
+    interface Current;
+    interface Synchronization;
+
+    struct otid_t
+    {
+	long formatID;  /* format identifier. 0 is OSI TP */
+	long bqual_length;
+	sequence <octet> tid;
+    };
+
+    struct TransIdentity
+    {
+	Coordinator coord;
+	Terminator term;
+	otid_t otid;
+    };
+
+    struct PropagationContext
+    {
+	unsigned long timeout;
+	TransIdentity current;
+	sequence <TransIdentity> parents;
+	any implementation_specific_data;
+    };
+
+	interface Current : CORBA::Current
+    {
+	void begin () raises (SubtransactionsUnavailable);
+	void commit (in boolean report_heuristics) raises (NoTransaction, HeuristicMixed, HeuristicHazard);
+	void rollback () raises (NoTransaction);
+	void rollback_only () raises (NoTransaction);
+
+	Status get_status ();
+	string get_transaction_name ();
+	void set_timeout (in unsigned long seconds);
+
+	Control get_control ();
+	Control suspend ();
+	void resume (in Control which) raises (InvalidControl);
+    };
+    
+    interface TransactionFactory
+    {
+	Control create (in unsigned long time_out);
+	Control recreate (in PropagationContext ctx);
+    };
+
+    interface Control
+    {
+	Terminator get_terminator () raises (Unavailable);
+	Coordinator get_coordinator () raises (Unavailable);
+    };
+
+    interface Terminator
+    {
+	void commit (in boolean report_heuristics) raises (HeuristicMixed, HeuristicHazard);
+	void rollback ();
+    };
+
+    interface Coordinator
+    {
+	Status get_status ();
+	Status get_parent_status ();
+	Status get_top_level_status ();
+    
+	boolean is_same_transaction (in Coordinator tc);
+	boolean is_related_transaction (in Coordinator tc);
+	boolean is_ancestor_transaction (in Coordinator tc);
+	boolean is_descendant_transaction (in Coordinator tc);
+	boolean is_top_level_transaction ();
+
+	unsigned long hash_transaction ();
+	unsigned long hash_top_level_tran ();
+
+	RecoveryCoordinator register_resource (in Resource r) raises (Inactive);
+
+	void register_synchronization (in Synchronization sync) raises (Inactive, SynchronizationUnavailable);
+
+	void register_subtran_aware (in SubtransactionAwareResource r) raises (Inactive, NotSubtransaction);
+
+	void rollback_only () raises (Inactive);
+
+	string get_transaction_name ();
+
+	Control create_subtransaction () raises (SubtransactionsUnavailable, Inactive);
+
+	PropagationContext get_txcontext () raises (Unavailable);
+    };
+
+    interface RecoveryCoordinator
+    {
+	Status replay_completion (in Resource r) raises (NotPrepared);
+    };
+    
+    interface Resource
+    {
+	Vote prepare () raises (HeuristicMixed, HeuristicHazard);
+	void rollback () raises (HeuristicCommit, HeuristicMixed, HeuristicHazard);
+	void commit () raises (NotPrepared, HeuristicRollback, HeuristicMixed, HeuristicHazard);
+	void commit_one_phase () raises (HeuristicHazard);
+	void forget ();
+    };
+
+    interface SubtransactionAwareResource : Resource
+    {
+	void commit_subtransaction (in Coordinator parent);
+	void rollback_subtransaction ();
+    };
+    
+    interface TransactionalObject
+    {
+    };
+
+    interface Synchronization : TransactionalObject
+    {
+	void before_completion ();
+	void after_completion (in Status s);
+    };
+    
+};
+
+#endif
diff --git a/ArjunaJTS/jts/classes/com/arjuna/ats/internal/jts/orbspecific/interposition/resources/arjuna/ServerTopLevelAction.java b/ArjunaJTS/jts/classes/com/arjuna/ats/internal/jts/orbspecific/interposition/resources/arjuna/ServerTopLevelAction.java
index d72a726..8eda3b7 100644
--- a/ArjunaJTS/jts/classes/com/arjuna/ats/internal/jts/orbspecific/interposition/resources/arjuna/ServerTopLevelAction.java
+++ b/ArjunaJTS/jts/classes/com/arjuna/ats/internal/jts/orbspecific/interposition/resources/arjuna/ServerTopLevelAction.java
@@ -591,6 +591,9 @@ protected boolean registerResource (Coordinator theCoordinator)
 
 	if (theCoordinator != null)
 	{
+	    if (resourceRefRegistered)
+		return true;
+
 	    try
 	    {
 		/*
@@ -600,6 +603,8 @@ protected boolean registerResource (Coordinator theCoordinator)
 
 		RecoveryCoordinator recoveryCoord = theCoordinator.register_resource(_resourceRef);
 
+		resourceRefRegistered = true;
+
 		if (!_theControl.isWrapper())
 		{
 		    ServerTransaction tx = (ServerTransaction) _theControl.getImplHandle();
@@ -651,4 +656,5 @@ protected org.omg.CosTransactions.ResourcePOATie _theResource;
 protected Resource                               _resourceRef;
 private boolean transactionInactive;
 
+private boolean resourceRefRegistered;
 }
diff --git a/ArjunaJTS/jts/classes/com/arjuna/ats/jts/OTSManager.java b/ArjunaJTS/jts/classes/com/arjuna/ats/jts/OTSManager.java
index d089883..5b0b7c2 100644
--- a/ArjunaJTS/jts/classes/com/arjuna/ats/jts/OTSManager.java
+++ b/ArjunaJTS/jts/classes/com/arjuna/ats/jts/OTSManager.java
@@ -31,6 +31,7 @@
 
 package com.arjuna.ats.jts;
 
+import com.arjuna.ats.jts.common.jtsPropertyManager;
 import org.omg.CORBA.BAD_PARAM;
 import org.omg.CORBA.SystemException;
 import org.omg.CosTransactions.Control;
@@ -315,8 +316,8 @@ public class OTSManager
 	com.arjuna.ats.internal.jts.ORBManager.setPOA(thePoa);
     }
     
-    public static final int serviceId = 0xDEADBEEF;
-
+    public static final int serviceId =
+	jtsPropertyManager.getJTSEnvironmentBean().getTransactionServiceId();
     private static int _localSlotId = -1;
     private static int _receivedSlotId = -1;
 
diff --git a/ArjunaJTS/jts/classes/com/arjuna/ats/jts/common/JTSEnvironmentBean.java b/ArjunaJTS/jts/classes/com/arjuna/ats/jts/common/JTSEnvironmentBean.java
index d2b8db6..da15606 100644
--- a/ArjunaJTS/jts/classes/com/arjuna/ats/jts/common/JTSEnvironmentBean.java
+++ b/ArjunaJTS/jts/classes/com/arjuna/ats/jts/common/JTSEnvironmentBean.java
@@ -54,6 +54,7 @@ public class JTSEnvironmentBean implements JTSEnvironmentBeanMBean
 
     @FullPropertyName(name = "com.arjuna.ats.jts.recovery.commitTransactionRetryLimit")
     private volatile int commitedTransactionRetryLimit = 3;
+    private volatile int transactionServiceId = 0xDEADBEEF;
 
 
     /**
@@ -415,4 +416,12 @@ public class JTSEnvironmentBean implements JTSEnvironmentBeanMBean
     {
         this.commitedTransactionRetryLimit = commitedTransactionRetryLimit;
     }
+
+    public int getTransactionServiceId() {
+        return transactionServiceId;
+    }
+
+    public void setTransactionServiceId(int transactionServiceId) {
+        this.transactionServiceId = transactionServiceId;
+    }
 }
diff --git a/ArjunaJTS/jts/classes/com/arjuna/ats/jts/utils/Utility.java b/ArjunaJTS/jts/classes/com/arjuna/ats/jts/utils/Utility.java
index 97e6c3d..a19b416 100644
--- a/ArjunaJTS/jts/classes/com/arjuna/ats/jts/utils/Utility.java
+++ b/ArjunaJTS/jts/classes/com/arjuna/ats/jts/utils/Utility.java
@@ -258,6 +258,9 @@ public class Utility
 
 	byte[] nodeName = TxControl.getXANodeName().getBytes();
 
+        if (Boolean.getBoolean("GLASSFISH-21532-WORKAROUND"))
+	    nodeName = new byte[0]; // TODO patch glassfish instead
+
 	otid.formatID = 0;
 	otid.tid = new byte[b.length+nodeName.length];
 	otid.bqual_length = nodeName.length;
diff --git a/ArjunaJTS/jts/classes/com/arjuna/ats/internal/jts/interposition/resources/arjuna/Interposition.java b/ArjunaJTS/jts/classes/com/arjuna/ats/internal/jts/interposition/resources/arjuna/Interposition.java
index 74ddaff..da14430 100644
--- a/ArjunaJTS/jts/classes/com/arjuna/ats/internal/jts/interposition/resources/arjuna/Interposition.java
+++ b/ArjunaJTS/jts/classes/com/arjuna/ats/internal/jts/interposition/resources/arjuna/Interposition.java
@@ -517,7 +517,7 @@ protected final void compareHierarchies (PropagationContext ctx, ServerTopLevelA
 	if (action != null)
 	{
 	    if (action.get_uid().notEquals(ctxHierarchy[depth])) {
-            jtsLogger.i18NLogger.warn_interposition_resources_arjuna_iptl(action.get_uid(), ctxHierarchy[depth - 1]);
+            jtsLogger.i18NLogger.warn_interposition_resources_arjuna_iptl(action.get_uid(), ctxHierarchy[depth]);
 
             printHierarchies = true;
         }
